Git使用



1.git commit -a 相当于运行 git add 把所有当前目录下的文件加入暂存区域再运行。git commit1.

Git的使用
首先需要配置用户和邮箱
git config --global user.name 'name'
git config --global user.email email

查看配置信息：
git config --list     所有
git config user.name  单个

然后设置公钥
ssh-keygen -t rsa -C "email"
复制id_rsa.pub到github中

注意 ： git clone会自动创建origin远程仓库别名，并指向相应的远程仓库


1.git中的提交 省略add  commit
  git commit -a -m "notion"


1,创建本地仓库filename可以理解为一个目录
mkdir filename
cd filename

2,初始化git
Git init
可以在filename中找到一个隐藏的.git文件
添加文件到git仓库,分两步
1,使用命令 git add <file> ,注意,可以反复多次使用,添加多个文件,将文件从工作区放到暂存区(stage /index)
2,使用命令 git commit  或git commit –m “注释”,将暂存区提交到当前分支

3,git status告诉你有文件修改过,用git diff 可以查看修改内容


4,HEAD指向的版本是当前的版本,因此,Git允许我们在版本的历史间穿梭,使用命令 git reset –hard commit_id.
穿梭前,用git log可以查看提交历史,以便回到哪个版本.
要重返未来,用git reflog 查看命令历史,以便要回到哪个版本
5,git log命令显示从最近到最远的提交日志，若闲输出信息太多，可以可以这样输入
Git log --pretty=oneline
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
  回退到上一个版本，git reset –hard HEAD^
  回到指定的版本，git reset –hard 版本号
6，git中提供了一个git reflog来记录你的每一次命令

7,git跟踪并管理的是修改，而非文件
8,git修改的撤销
查看当前版本和版本仓库中的不同
Git diff HEAD readme.txt
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
Git reset HEAD file，可以把暂存区的修改撤销掉（unstge）,重新放回工作区;
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
9,删除文件
Rm test.txt
Git rm test.txt
Git  commit –m “remove test.txt”


Git checkout – test.txt







1，	远程仓库
由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
ssh-keygen -t rsa -C "邮箱"
2创建远程仓库，并与本地仓库关联
可以在github上创建远程仓库learngit
关联方法
1：push一个存在的仓库
git remote add origin https://github.com/dragonGreat/learngit.git
git push -u origin master
2:创建一个新的仓库
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/dragonGreat/learngit.git
git push -u origin master:第一次推送master分支的所有内容
2，	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
3，	下次提交
Git push origin master
4，	远程克隆(ssh协议在某些公司内部可能不可使用)
Git clone https://github.com/dragonGreat/gitskills.git
5，	分支管理
HEAD指向master, master指向提交
创建分支：dev
Git checkout –b dev
Git checkout中带参数b表示创建并切换


Git branch查看分支
Git checkout master 切换到master分支
将dev分支合并到master上
Git merge dev

1.查看远程分支
git branch -a   远程分支用红色表示出来

2，删除远程分支
git push origin --delete <branchName>

git push origin --delete tag <tagname>


推送一个空分支到远程分支，其实就是相当于删除远程分支
git push origin :<branchName>

重命名本地分支：
git branch -m A B  :将A改为B


创建远程origin的dev分支到本地
git checkout -b dev  origin/dev
##

删除分支
Git branch –d dev
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


6,分支冲突
需手动解决再提交
 看分支的详细合作情况
Git log –graph –pretty=oneline –abbrev-commit
Git log –graph 命令可以看到分支合并图

7，合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
git merge --no-ff -m "merge with no-ff" dev

8，bug分支
Git 提供一个stash功能，可以把当前工作现场 存储起来，等以后恢复后继续工作
注意stash功能的使用和恢复
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

9，多人协作
查看远程仓库的信息
Git remote
Git remote –v显示详细的信息
当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支
现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
$ git checkout -b dev origin/dev
10，因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
11，发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
	
打标签
Git tag v1.0

还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
$ git tag -a v0.1 -m "version 0.1 released" 3628164:最后数字是ID

	命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
	git tag -a <tagname> -m "blablabla..."可以指定标签信息；	git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
	命令git tag可以查看所有标签。

	命令git push origin <tagname>可以推送一个本地标签；
	命令git push origin --tags可以推送全部未推送过的本地标签；
	命令git tag -d <tagname>可以删除一个本地标签；
	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
	忽略某些文件时，需要编写.gitignore；
	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

	给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。

4.然后就写规则来操作要忽略的文件了。.gitignore文件过滤有两种模式，开放模式和保守模式

4.1开放模式负责设置过滤哪些文件和文件夹

eg：

过滤文件夹设置：

/mtk/       表示过滤这个文件夹

过滤文件设置

指定过滤某种类型的文件：
*.zip
*.rar
*.via
*.tmp
*.err

指定过滤某个文件：
/mtk/do.c

/mtk/if.h
 
4.2 b保守模式负责设置哪些文件不被过滤，也就是哪些文件要被跟踪。
跟踪某个文件夹

!/plutommi/mmi

跟踪某类文件

!*.c

!*.h

跟踪某个指定文件

!/plutommi/mmi/mmi_features.h

4.3.配置.gitignore 的简易原则

采用共享模式与保守模式结合配置的办法。eg：一个文件夹下有很多文件夹和文件，而我只想跟踪其中的一个文件，这样设置就可以满足这种情况，先用共享模式把整个目录 都设置为不跟踪，然后再用保守模式把这个文件夹中想要跟踪的文件设置为被跟踪，配置很简单，就可以跟踪想要跟踪的文件。








